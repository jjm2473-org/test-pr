name: iStore Pending CI

on:
  push:
    branches:
      - pending

env:
  TZ: Asia/Shanghai
  MG_BASE_BRANCH: main
  MG_HEAD_BRANCH: pending
  CI_AUTO_BRANCH: ci/automerging

jobs:
  pending:
    runs-on: ubuntu-latest
    name: iStore Pending CI
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout BASE branch
        uses: actions/checkout@main
        with:
          ref: ${{ env.MG_BASE_BRANCH }}
          fetch-depth: 1

      - name: Fetch HEAD branch
        run: |
          git remote set-branches origin $MG_BASE_BRANCH
          git remote set-branches --add origin $MG_HEAD_BRANCH
          git fetch
          git merge-base --is-ancestor $MG_BASE_BRANCH origin/$MG_HEAD_BRANCH || { echo "$MG_HEAD_BRANCH branch MUST rebase to ${MG_BASE_BRANCH}!" >&2; exit 1; }

      - name: Clone a workspace
        run: |
          git clone . ../cloned
          rm -rf ../cloned/.git
          cp -a .git ../cloned/

      - name: Mkdirs
        run: |
          mkdir staging_dir

      - name: Save Current ipk list before
        run: |
          find work -type f | tee staging_dir/old.lst

      - name: List Commits
        run: |
          git log --reverse --pretty=format:'%H' "origin/${MG_HEAD_BRANCH}...${MG_BASE_BRANCH}" > staging_dir/commits
          cat staging_dir/commits
          [ -s staging_dir/commits ]
          echo >>staging_dir/commits

      - name: Git user
        run: |
          git config user.email "actions-bot@noreply.github.com"
          git config user.name "Actions Bot"

      - name: Purge and Merge
        run: |
          while read; do
            commit="$REPLY"
            [ -n "$commit" ] || continue
            echo "pick $commit"
            git show --pretty= --name-only --no-renames $commit | grep '\.ipk$' || true > staging_dir/files
            echo >>staging_dir/files
            git cherry-pick $commit
            git -C ../cloned checkout $commit
            while read; do
              file="$REPLY"
              [ -n "$file" ] || continue
              dir="`dirname $file`"
              rm -f "$file"
              [ -f "../cloned/$file" ] || continue
              pkg=`tar -xOf "../cloned/$file" ./control.tar.gz | tar -xOz ./control | grep '^Package: ' | sed 's/^Package: \(.*\)$/\1/'`
              ls "$dir/$pkg"_*.ipk | while read; do
                del="$REPLY"
                pkg0=`tar -xOf "$del" ./control.tar.gz | tar -xOz ./control | grep '^Package: ' | sed 's/^Package: \(.*\)$/\1/'`
                [ "$pkg" = "$pkg0" ] || continue
                rm -f "$del"
              done
              mkdir -p "$dir"
              cp -a "../cloned/$file" "$file"
            done < staging_dir/files
            git add --all
            git commit --no-edit --amend
          done < staging_dir/commits

      - name: Save Current ipk list after
        run: |
          find work -type f | tee staging_dir/new.lst

      - name: Report
        run: diff -au1 staging_dir/old.lst staging_dir/new.lst | tee staging_dir/changes.diff || true

      - name: Push
        run: |
          git push -f origin ${MG_BASE_BRANCH}:${CI_AUTO_BRANCH}

      - name: create pr
        id: create_pr
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { MG_BASE_BRANCH, CI_AUTO_BRANCH } = process.env
            const fs = require('fs')
            const diff = fs.readFileSync('staging_dir/changes.diff', 'utf8')
            const body = "# Automerging\nThis PR was created by CI\n## Changes\n```diff\n" + diff + "\n```\n"
            const oldprs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: CI_AUTO_BRANCH,
              base: MG_BASE_BRANCH,
              per_page: 1
            })
            if (oldprs.status >= 200 && oldprs.status < 300 && oldprs.data.length > 0) {
              const pr_num=oldprs.data[0].number
              console.log("PR already existed, update #", pr_num)
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_num,
                body: body
              })
              return pr_num
            } else {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "Auto Merging",
                head: CI_AUTO_BRANCH,
                base: MG_BASE_BRANCH,
                body: body
              })
              if (pr.status >= 200 && pr.status < 300) {
                console.log("PR created #", pr.data.number)
                return pr.data.number
              }
            }

      - name: merge pr
        uses: actions/github-script@v7
        env:
          PULL_NUMBER: ${{steps.create_pr.outputs.result}}
        with:
          script: |
            const { PULL_NUMBER } = process.env
            const mr = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: PULL_NUMBER,
              merge_method: "rebase"
            })
            return mr.status >= 200 && mr.status < 300 && mr.data.merged

